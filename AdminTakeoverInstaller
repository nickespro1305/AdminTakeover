#!python3
import psutil
import subprocess
import shutil
import os
import json

DOWNLOAD_URL1="https://raw.githubusercontent.com/nickespro1305/AdminTakeover/refs/heads/main/AdminTakeover.py"
DOWNLOAD_URL2="https://raw.githubusercontent.com/nickespro1305/AdminTakeover/refs/heads/main/lib/run.py"
DOWNLOAD_URL3="https://raw.githubusercontent.com/nickespro1305/AdminTakeover/refs/heads/main/lib/update.py"

parent_keytring = [
    "https://example.com",
    "https://api.github.com",
    "https://jsonplaceholder.typicode.com/posts/1"
]

def generate_urls_json(file_path, urls):
    """
    Genera un archivo JSON con una lista de URLs.
    
    Args:
        file_path (str): Ruta donde se guardará el archivo JSON.
        urls (list): Lista de URLs a guardar en el archivo.
        
    Returns:
        str: Mensaje indicando el éxito o error en la creación del archivo.
    """
    try:
        # Validar que `urls` es una lista
        if not isinstance(urls, list):
            raise ValueError("El parámetro 'urls' debe ser una lista.")
        
        # Guardar las URLs en el archivo JSON
        with open(file_path, 'w') as file:
            json.dump(urls, file, indent=4)
        
        return f"Archivo JSON creado exitosamente en: {file_path}"
    except Exception as e:
        return f"Error al crear el archivo JSON: {e}"

def download_file(url, archivo_destino):
    try:
        # Ejecutar el comando curl para descargar el archivo
        resultado = subprocess.run(
            ['curl', '-k', '-o', archivo_destino, url],
            shell=True, check=True
        )

        # Comprobar si hubo algún error durante la ejecución
        if resultado.returncode == 0:
            print(f"Archivo descargado exitosamente a {archivo_destino}")
        else:
            print(f"Error en la descarga: {resultado.stderr}")
    
    except Exception as e:
        print(f"Error al ejecutar curl: {e}")

##############################################
#                                            #
#                                            #
##############################################

print("Welcome to the AdminTakeover instalation assistant")
print("Please Select a drive to start the install, just put the letter")

for particion in psutil.disk_partitions(all=False):
    print(f"Disk: {particion.device}")
    print(f"  MountPoint: {particion.mountpoint}")
    try:
        uso = psutil.disk_usage(particion.mountpoint)
        print(f"  Total Space: {uso.total / (1024**3):.2f} GB")
        print(f"  Used Percentage: {uso.percent}%")
    except PermissionError:
        print("  error tryng to access the drive")
    print()

SELECTED_DISK = input("[*]")

# confirmacion de disco
for particion in psutil.disk_partitions(all=False):
    if particion.device.startswith(SELECTED_DISK.upper()):
        print(f"Información del disco {SELECTED_DISK.upper()}:")
        print(f"  Punto de montaje: {particion.mountpoint}")
        print(f"  Sistema de archivos: {particion.fstype}")
        try:
            uso = psutil.disk_usage(particion.mountpoint)
            print(f"  Espacio total: {uso.total / (1024**3):.2f} GB")
            print(f"  Espacio usado: {uso.used / (1024**3):.2f} GB")
            print(f"  Espacio libre: {uso.free / (1024**3):.2f} GB")
            print(f"  Porcentaje usado: {uso.percent}%")
        except PermissionError:
            print("  No se tienen permisos para acceder a esta partición.")

print(f"Are you sure than you want to continue with {SELECTED_DISK}?")
CONFIRMATION = input("[y/N]")

if CONFIRMATION == "Y" or CONFIRMATION == "y":
    # dejar elegir al usuario el tipo de compilacion deseada
    # print("select the compilation flavour")
    # print("[Red]: fastest, DETECTED BY ANTIVIRUS")
    # print("[Purple]: offuscated, heaviest, requires python on every target to use")
    # flavour = input("[Red/Purple]")
    
    print("Do you want to do a clean install?")
    CLEAN_INSTALL = input("[y/N]")

    print("please wait, the program is installing on the selected drive, it can taka a while")
    print(os.getcwd())
    os.chdir(f"{SELECTED_DISK}:/")
    print("STEP 1/10, creating default folders")
    os.mkdir("lib")
    os.mkdir("exploits")
    os.mkdir("output")
    os.mkdir("keys")

    print("STEP 2/10, downloading main files")
    download_file(DOWNLOAD_URL1, "AdminTakeover.py")
    os.chdir("lib")
    download_file(DOWNLOAD_URL2, "run.py")
    download_file(DOWNLOAD_URL3, "update.py")
    os.chdir("..")

    print("STEP 3/10, downloading main dependences for compilation")
    subprocess.run(['python3', '-m', 'pip', 'install', 'pip'], shell=True, check=True)

    print("STEP 4/10, creating venv enviroment")
    subprocess.run(['python3', '-m', 'venv', 'venv'], shell=True, check=True)
    os.chdir("venv/Scripts")
    subprocess.run(['activate.bat'], shell=True, check=True)
    os.chdir("..")
    os.chdir("..")

    print("STEP 5/10, installing pip requirements for compilation")
    subprocess.run(['pip', 'install', 'rich', 'pyinstaller', 'json', 'shutil', 'psutil'], shell=True, check=True)

    print("STEP 6/10, compilating program")
    subprocess.run(['pyinstaller', '--onefile', 'AdminTakeover.py'], shell=True, check=True)

    print("STEP 7/10, copyng compiled files")
    os.chdir("dist")
    shutil.copy("AdminTakeover.exe", "..")
    os.chdir("..")

    print("STEP 8/10, testing compilated files")
    subprocess.run(['AdminTakeover.exe', 'hello'], shell=True, check=True)

    print("STEP 9/10, generating parent keyring")
    os.chdir("keys")
    message = generate_urls_json("parent-keys.json", parent_keytring)
    print(message)

    print("STEP 10/10, cleaning up")
    if CLEAN_INSTALL == "Y" or CLEAN_INSTALL == "y":
        # borrar archivos inecesarios
        print("cleaning temp files")
        os.removedirs("build")
        os.removedirs("dist")
        os.remove("AdminTakeover.py")
        os.remove("AdminTakeover.spec")
    print("AdminTakeover succesfully installed in device")
elif CONFIRMATION == "":
    print("operacion cancelada con exito")
else:
    print("operacion cancelada con exito")